\likechapter{Заключение}

В настоящей работе был предложен метод формального доказательства
эквивалентности результатов
статической и динамической компоновки блоков ассемблерного кода, позволяющий
доказывать следующие утверждения:

*   интенсиональная эквивалентность состояний исполнителя в момент
    непосредственного вызова функции и после исполнения непрямого `jmp` по
    указателю на тело функции;
*   интенсиональная эквивалентность состояний исполнителя в момент
    непосредственного вызова функции и после исполнения соответствующего этой
    функции элемента PLT при условии корректно заполненного GOT;
*   внешняя эквивалентность (эквивалентность вызовов) некоторой
    функции и соответствующего ей элемента PLT при условии корректно
    заполненного GOT.

При помощи этого метода был разработан фреймворк, формализующий:

*   подмножество ассемблера x86-64 на базовых блоках, необходимое
    для описания элементов PLT (на самом деле больше) со стеком и
    типизированной статической памятью;
*   подмножество ABI, касающееся компоновки с динамическим связыванием.

Существенная часть разработанного фреймворка может быть переиспользована
для доказательства утверждений о других ассемблерах благодаря ее обобщению
до метаассемблера, позволяющего автоматически получать большинство
определений используемых сущностей, требующего от разработчика минимального
описания используемого языка:

*   имена типов инструкций и управляющих инструкций;
*   функции, описывающие семантику исполнения таких инструкций.

Возможные направления дальнейшей работы:

*   реализация динамического компоновщика с использованием приведенного
    фреймворка, корректно преобразующего код и добавляющего таблицы GOT и PLT;
*   дальнейшее обобщение разработанного фреймворка в области компоновки
    (выделение части фреймворка в мета-компоновку);
*   реализация ленивой динамической компоновки.
