\likechapter{Заключение}

В настоящей работе был предложен метод формальной верификации 
статической и динамической компоновки блоков ассемблерного кода, позволяющий
доказывать следующие утверждения про **TODO**:

*   формализовано подмножество ассемблера x86\_64 на базовых блоках, необходимое
    для описания элементов PLT (на самом деле больше) со стеком и
    типизированной статической памятью;
*   в этом фреймворке формализовано подмножество ABI, касающееся компоновки
    со статическим и динамическим связыванием;
*   доказана (интенсиональная) эквивалентность состояний исполнителя в момент
    непосредственного вызова функции и после исполнения непрямого `jmp` по
    указателю на тело функции;
*   доказана (интенсиональная) эквивалентность состояний исполнителя в момент
    непосредственного вызова функции и после исполнения соответствующего этой
    функции элемента PLT при условии корректно заполненного GOT;
*   доказана внешняя эквивалентность (эквивалентность вызовов) некоторой
    функции и соответствующего ей элемента PLT при условии корректно
    заполненного GOT.

Возможные направления дальнейшей работы:

*   реализация динамического компоновщика с использованием приведенного
    фреймворка, корректно преобразующего код и добавляющего таблицы GOT и PLT;
*   реализация ленивой динамической компоновки.
