\likechapter{Введение}

В настоящее время все больше внимания уделяется разработке программ
гарантированного качества. Поскольку цена любой ошибки определяется частотой ее
проявления, сложностью поиска причины ее возникновения и сложностью ее
устранения, существуют классы программ, для которых критически важно
гарантировать отсутствие максимально широкого класса ошибок. К таким программам
относятся, например, все программы из стека разработки
программного обеспечения: интерпретаторы, трансляторы, оптимизаторы,
генераторы и компоновщики кода.

В последние несколько лет в среде разработчиков компиляторов этому факту 
уделяется все больше внимания. Например, разработаны верфицированный
компилятор языка программирования C [@compcert] и кодогенератор с доказанно
корректными оптимизациями [@vellvm].

При этом, однако, все известные средства верифицированной трансляции ставят целью
доказательство корректности производимых преобразований, предполагая абсолютную
корректность этапа выбора машинных инструкций и последующей компоновки.

Целью настоящей работы является разработка метода формальной верификации
статической и динамической компоновки блоков ассемблерного кода с сохранением
семантики с точностью до ABI.

В первой главе представлено введение в генерацию кода на языке ассемблера,
ABI, компоновку (линковку) и формально верифицированные трансляторы, рассмотрены
существующие решения в данных областях, их возможности и ограничения.

Во второй главе представлены основные этапы разработки метода формальной
верификации компоновки блоков ассемблерного кода.

В третьей главе представлен конечный вариант разработанного метода формальной
верификации статических и динамических компоновщиков, позволяющий доказать,
что для корректно заполненной таблицы смещений (GOT) вызов элемента таблицы
процедурной линковки (PLT) эквивалентен непосредственному вызову функции.

Весь программный код, представленный в настоящей работе, оформлен в стиле
Literate Agda[@lagda].
