# Обзор предметной области

Для программ, относящихся к стеку разработки программного обеспечения,
критически важно гарантировать отсутствие как можно большего числа возможных
ошибок, ведь цена ошибки в этой области чрезвычайно высока. В настоящее время
уже существуют различные проекты, направленные на избежание ошибок в
программах стека разработки.

В данной главе представлены обзор существующих проектов и введение в
кодогенерацию и компоновку программ.

## От исходного кода к исполнению на CPU

Готовый исходный код проходит через несколько стадий трансляции перед
непосредственным исполнением на CPU:

*   трансляция из первоначального языка программирования в первое
    промежуточное представление;
*   последовательная трансляциия между промежуточными представлениями;
*   трансляция в ассемблер с выбором ABI;
*   трансляция из языка ассемблера в машинный код;
*   упаковка машинного кода в объектные файлы;
*   отображение объектных файлов в память;
*   линковка загруженного в память кода.

\includegraphics[width=\textwidth]{../slides1/diagram.png}

На рисунке **TODO** изображена диаграмма всевозможных преобразований
программы. Вершинами представленного графа являются состояния программы
и/или исполнителя (в зависимости от формализма языка программирования,
например, в лямбда-исчислении всем состоянием исполнителя является вся
программа, в то время как в языке ассемблера состоянием исполнителя
являются регистры и память). В направлении оси абсцисс располагаются ребра,
вверху графа представляющие собой оптимизации программы, а внизу —
исполнение кода на CPU\footnote{С точки зрения теории языков
программирования вычисление на CPU представляет собой последовательное
применение к состоянию вычислителя некоторого простого набора редукций, а
оптимизации кода на первоначальном языке программирования можно
рассматривать как некоторый набор нетривиальных правила редукций.}. В
направлении оси ординат располагаются ребра, соответствующие различным
этапам трансляции кода между следующими представлениями:

*   $S$ — код на первоначальном языке программирования;
*   $I_1$, ..., $I_n$ — код на некотором промежуточном языке;
*   $ASM$ — код на языке ассемблера;
*   $opcode$ — машинный код;
*   $.o$ — скомпилированные файлы с исполняемым кодом;
*   $map mem$ — код, загруженный в память;
*   $ld mem$ — пролинкованный код в памяти.

\includegraphics[width=\textwidth]{../slides1/idealworld.png}

Конечной целью разработки доказанно корректного стека разработки
программного обеспечения является доказательство коммутативности диаграммы,
представленной на рисунке **TODO**. Заметим, однако, что в этой диаграмме
участвует корректность спецификации машинного кода производителями CPU, а
также технический процесс производства конкретного устройства, на котором
производятся вычисления, что не поддается формальному доказательству.
Поэтому большая часть усилий разработчиков доказанно корректных программ
стека разработки программного обеспечения полностью игнорирует нижнюю
половину диаграммы, начиная с уровня $opcode$.

\includegraphics[width=\textwidth]{../slides1/ld.png}

Целью настоящей работы является доказательство коммутативности диаграммы,
охватывающей область от уровня $ASM$ до уровня $ld mem$ (рис **TODO**) в
предположенях, что:

*   бинарный код, исполняемый CPU, соответствует семантике заданного
    ассемблера;
*   конкретное вычислительное устройствое произведено в полном соответствии с
    техническим процессом и не имеет ошибок;
*   операционная система настраивает таблицу трансляции виртуальных адресов
    в соотвествии с расположением ассемблерного кода в виртуальной памяти.

Строго говоря, первый и последний пункты данного списка поддаются
формальной верификации:

*   первый — при наличии исходного кода интерпретатора бинарного кода,
    компилируемого в транзисторы производителями CPU;
*   последний — при наличии доказанно корректного ядра операционной системы
    (такие проекты существуют [@l4bitc]) с доказанно корректной подсистемой
    виртуальной памяти (такие проекты автору данной работы не известны).

\includegraphics[width=\textwidth]{../slides1/idealcompiler.png}

Таким образом, при наличии транслятора из первоначального языка
программирования в язык ассемблера, для которого доказана коммутативность
диаграммы, охватывающей область от уровня $S$ до уровня $ASM$ (рисунок
**TODO**), благодаря тривиальной теореме из алгебры/теории
категорий\footnote{
$(g \circ f \= k \circ h) \to (m \circ k \= s \circ i)
\to (m \circ g \circ f \= s \circ i \circ h)$
} в указанных выше
предположениях будет достигнута конечная цель разработки доказанно
корректного стека разработки программного обеспечения, указанная выше.

## Основные определения

Определим используемые в дальнейшем термины.

_Язык ассемблера_ — машинно-ориентированный язык, предназначенный для
представления в удобочитаемой форме программ, записанных в машинном коде.
Каждая команда языка ассемблера соответствует какой-либо команде
исполнителя. Для краткости будем называть язык ассемблера _ассемблером_.

_SSA-представление (static single assignment form)_ — промежуточное
представление кода, в котором каждой переменной значение присваивается не
более одного раза.

_Компоновка (линковка)_ — сборка исполняемого файла из нескольких объектных
файлов, в процессе которой происходит проставление необходимых ссылок на
внешние функции и переменные. При _статической_ линковке код всех исходных
объектных файлов включается в результирующий файл с уже заполненными
ссылками на переменные и функции. При _динамической_ линковке в объектные
файлы добавляется только необходимая метаинформация и, возможно,
дополнительные фрагменты исходного кода, а непосредственное заполнение
ссылок производится при загрузке программы и библиотек _динамическим
загрузчиком_.

К дополнительным фрагментам исходного кода, добавляемых при динамической
линковке, относятся таблицы _GOT (global offset table)_ и _PLT (procedure
linkage table)_.

_Простой динамической линковкой_ будем называть динамическую линковку, при
которой вызовы внешних функций заменяются вызовом соответствующих им
элементов PLT, а сам элемент PLT состоит из одной инструкции: indirect
`jmp` на соответствующий элемент GOT.

## Существующие проекты

В настоящем разделе рассмотрены некоторые проекты, доказывающие
коммутативность диаграмм, охватывающих различные уровни от $S$ до $ASM$
включительно на рисунке **TODO: самый первый рисунок**.

### Software Foundations

Software Foundations [@sf] — курс по математическим основам надежного
программного обеспечения. Покрывает основные понятия логики, доказательство
теорем с помощью Coq[@coq], функциональное программирование и статические
системы типов, не требуя при этом предварительного углубленного изучения
логики или языков программирования.

Отличительной особенностью этого курса является то, что он полностью
формализован и ориентирован на чтение и выполнение упражнений внутри
интерактивной сессии Coq.

### Iron Lambda

Iron Lambda [@ironlambda] — набор доказательств на Coq для функциональных
языков программирования различной сложности. Покрывает несколько
распространенных систем типов. В их число входят просто типизированное
лямбда-исчисление, SystemF и некоторые их расширения.

### CompCert

CompCert [@compcert] — исследовательский проект, направленный на разработку
формально верифицированных компиляторов, применимых для встраиваемого
программного обеспечения. Такие компиляторы предоставляют machine-checked
доказательства того, что генерируемый ими код имеет ту же семантику, что и
исходный код.

Основным результатом этого проекта является верифицированный компилятор
языка C, покрывающий почти весь стандарт ISO C90 и генерирующий эффективный
код для архитектур PowerPC, ARM и x86.

### Vellvm

Vellvm (Verified LLVM) [@vellvm] представляет собой фреймворк для
доказательства утверждений о программах, записанных в промежуточном
представлении LLVM. Содержит формализацию промежуточного представления
LLVM, его системы типов и свойств его SSA-представления.

### Typed Assembly Language

В статье [@tal] описаны статически типизированный язык ассемблера (TAL) и
сохраняющая типы трансляция в него из SystemF. TAL основан на обычном RISC
ассемблере, но его система типов обеспечивает поддержку языковых
абстракций высокого уровня (например, замыкания, кортежи и пользовательские
типы данных). При этом TAL не накладывает почти никаких ограничений на
оптимизации более низкого уровня, таких как аллокация регистров и выбор
инструкций.

Типизированный ассемблер можно применять для написания верифицированных
компиляторов и доказательства различных теорем про нетривиальные ассемблеры
(с оптимизациями, преобразованиями между ABI и так далее). Однако, в
указанной статье это направление исследований не рассматривается.

## Предлагаемый метод решения поставленной задачи

Поставленную задачу планируется решить, формализовав типизированный
ассемблер, содержащий необходимое для реализации простой динамической
линковки подмножество инструкций ассемблера x86-64, с помощью
реализованного ассемблера формализовать подмножество ABI, касающееся
линковки, ввести понятие эквивалентности блоков кода и доказать требуемую
эквивалентность.

## Выводы по главе

В данной главе было представлено введение в кодогенерацию и линковку, а так
же был дан краткий обзор существующих проектов, покрывающих различные
уровни процесса трансляции исходного кода в исполняемый машинный код.
